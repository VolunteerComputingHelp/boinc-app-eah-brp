Index: boinc-app-eah-brp/demod_binary_fft_fftw.c
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_fft_fftw.c
+++ boinc-app-eah-brp/demod_binary_fft_fftw.c
@@ -28,6 +28,7 @@
 
 #include <stdlib.h>
 #include <gsl/gsl_math.h>
+#include <sys/stat.h>
 #include "demod_binary.h"
 #include "erp_utilities.h"
 
@@ -41,6 +42,7 @@
 // TODO: do we wanna keep those global (or use proper C++, or pass them around)?
 fftwf_complex *t_series_resamp_fft = NULL; 
 fftwf_plan fft_plan;
+extern const char fftw_version[];
 
 
 int set_up_fft(DIfloatPtr input, DIfloatPtr *output, uint32_t nsamples, unsigned int fft_size)
@@ -63,9 +65,77 @@ int set_up_fft(DIfloatPtr input, DIfloat
     /// else load system wide wisdom if present
 
 #ifdef EMBEDDED_WISDOM_HEADER
-    fftwf_import_wisdom_from_string(EMBEDDED_WISDOM);
+    if (fftwf_import_wisdom_from_string(EMBEDDED_WISDOM))
+    {
+        logMessage(info, true, "Successfully imported wisdom from string \"%s\".\n",EMBEDDED_WISDOM);
+    }
+    else
+    {
+        logMessage(error, true, "Failed to import wisdom from string \"%s\".\n",EMBEDDED_WISDOM);
+    }
 #else
-    fftwf_import_system_wisdom();
+    // checking if BRP wisdom file exists, prefering that over system wisdom file
+    {
+        struct stat buffer;
+        char wisdomfilenameWithVersion[255];
+        snprintf(wisdomfilenameWithVersion,254,"/etc/fftw/brp4.%s.wisdomf",fftw_version);
+        char wisdomfilenameUnversioned[]="/etc/fftw/brp4.wisdomf";
+        char *wisdomfilename=NULL;
+        // checking if wisdomfilename exists, opening it if it does, falling back to system wisdom if not
+        if (!stat(wisdomfilenameWithVersion,&buffer))
+        {
+            wisdomfilename = wisdomfilenameWithVersion;
+        }
+	else
+        {
+            logMessage(info, true, "No FFTW wisdom file at '%s'.\n", wisdomfilenameWithVersion);
+            if (!stat(wisdomfilenameUnversioned,&buffer))
+	    {
+                wisdomfilename = wisdomfilenameUnversioned;
+            }
+            else
+            {
+                logMessage(info, true, "No FFTW wisdom file at '%s'.\n", wisdomfilenameUnversioned);
+            }
+        }
+        if (wisdomfilename)
+        {
+            if (fftwf_import_wisdom_from_filename(wisdomfilename))
+	    {
+                logMessage(info, true, "Successfully imported FFTW wisdom from file '%s'.\n", wisdomfilename);
+            }
+	    else
+	    {
+                logMessage(error, true, "Failed to import FFTW wisdom from '%s'.\n", wisdomfilename);
+            }
+	}
+	else
+	{
+            if (fftwf_import_system_wisdom())
+            {
+                logMessage(info, true, "Successfully imported system wisdom.\n");
+            }
+            else
+            {
+        	// preparing test for file to exist
+        	const char filename[]="/etc/fftw/wisdomf";
+        	if (stat(filename,&buffer))
+		{
+		    logMessage(info, true,
+                               "No wisdom found. Consider to create application specific wisdom file for FFTW library version '%s' at '%s' or '%s'.\n",
+                               fftw_version,
+                               wisdomfilenameWithVersion,
+                               wisdomfilenameUnversioned);
+		}
+		else
+        	{
+        	    logMessage(error, true, "Failed to import FFTW system-wide wisdom even though '%s' exists.\n", filename);
+		    logMessage(info, false, "Consider to create application specific wisdom file at '%s' or '%s'.\n",
+                                            wisdomfilenameWithVersion, wisdomfilenameUnversioned);
+        	}
+            }
+        }
+    }
 #endif
     fft_plan = fftwf_plan_dft_r2c_1d(nsamples, input.host_ptr, t_series_resamp_fft, FFTW_ESTIMATE);
 
