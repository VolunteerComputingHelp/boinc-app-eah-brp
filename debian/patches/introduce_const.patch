Index: boinc-app-eah-brp/erp_utilities.cpp
===================================================================
--- boinc-app-eah-brp.orig/erp_utilities.cpp
+++ boinc-app-eah-brp/erp_utilities.cpp
@@ -53,32 +53,32 @@ extern const ERP_LOGLEVEL c_loglevel = d
 
 int check_byte_order()
 {
-    uint16_t word = 0x0001;
-    uint8_t* byte = (uint8_t*) &word;
+    const uint16_t word = 0x0001;
+    const uint8_t* byte = (uint8_t*) &word;
     return(byte[0] ? ERP_LITTLE_ENDIAN : ERP_BIG_ENDIAN);
 }
 
-void endian_swap(uint8_t* pdata, size_t dsize, size_t nelements)
+void endian_swap(uint8_t* pdata, const size_t dsize, const size_t nelements)
 {
-    size_t i, j, indx;
+    size_t i, j, idx;
     uint8_t tempbyte;
 
     if (dsize <= 1) return;
 
     for (i = 0; i < nelements; ++i) {
-        indx = dsize;
+        idx = dsize;
         for (j = 0; j < dsize/2; ++j) {
             tempbyte = pdata[j];
-            indx = indx - 1;
-            pdata[j] = pdata[indx];
+            --idx;
+            pdata[j] = pdata[idx];
-            pdata[indx] = tempbyte;
+            pdata[idx] = tempbyte;
         }
-        pdata = pdata + dsize;
+        pdata += dsize;
     }
     return;
 }
 
-void getLocalTime(char* buffer) {
+void getLocalTime(char* const buffer) {
     time_t timeNow = time(0);
     struct tm* timeLocal = localtime(&timeNow);
     strftime(buffer, TIME_BUFFER_SIZE - 1, "%H:%M:%S", timeLocal);
@@ -230,9 +230,9 @@ int resolveFilename(const char *logical,
     return boinc_resolve_filename(logical, physical, maxLength);
 }
 
-int dumpFloatBufferToTextFile(const float *buffer,
+int dumpFloatBufferToTextFile(const float *const buffer,
                               const size_t size,
-                              const char  *filename)
+                              const char* const filename)
 {
     FILE *output = fopen(filename, "w");
     if(NULL == output) {
@@ -249,7 +249,7 @@ int dumpFloatBufferToTextFile(const floa
     return(0);
 }
 
-int findNextPowerofTwo(int value)
+int findNextPowerofTwo(const int value)
 {
     // sanity check (no negative values allowed)
     if(value < 0) {
Index: boinc-app-eah-brp/erp_utilities.h
===================================================================
--- boinc-app-eah-brp.orig/erp_utilities.h
+++ boinc-app-eah-brp/erp_utilities.h
@@ -51,14 +51,14 @@ extern "C" {
     extern void endian_swap(uint8_t* pdata, const size_t dsize, const size_t nelements);
     extern void logMessage(const ERP_LOGLEVEL logLevel, const bool showLevel, const char* msg, ...);
 
-    extern void sincosLUTInitialize(float **sinLUT, float **cosLUT);
-    extern bool sincosLUTLookup(float x, float *sinX, float *cosX);
+    extern void sincosLUTInitialize(const float ** const sinLUT, const float ** const cosLUT);
+    extern bool sincosLUTLookup(const float x, float *const sinX, float *const cosX);
 
-    extern int resolveFilename(const char *logical, char *physical, int maxLength);
+    extern int resolveFilename(const char *const logical, char *const physical, int maxLength);
 
-    extern int dumpFloatBufferToTextFile(const float *buffer, const size_t size, const char *filename);
+    extern int dumpFloatBufferToTextFile(const float *const buffer, const size_t size, const char* const filename);
 
-    extern int findNextPowerofTwo(int value);
+    extern int findNextPowerofTwo(const int value);
 
 #ifdef  __cplusplus
 }
Index: boinc-app-eah-brp/demod_binary.c
===================================================================
--- boinc-app-eah-brp.orig/demod_binary.c
+++ boinc-app-eah-brp/demod_binary.c
@@ -155,8 +155,8 @@ int MAIN (unsigned int argc, char *argv[
   unsigned int dirty_page_count;            // counts sumspec pages marked dirty (for logging only)
   unsigned int fft_size;                    // size of the FFT
   DIfloatPtr powerspectrum ;                // power spectrum of the resampled time series
-  float *sinLUTsamples = NULL;              // sin/cos LUT samples
-  float *cosLUTsamples = NULL;              // sin/cos LUT samples
+  const float *sinLUTsamples = NULL;        // sin/cos LUT samples
+  const float *cosLUTsamples = NULL;        // sin/cos LUT samples
 
   unsigned int window_2;                    // half the size of the running median window
   unsigned int fundamental_idx_hi;          // frequency bin of the highest fundamental frequency searched for
Index: boinc-app-eah-brp/demod_binary_resamp_cpu.c
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_resamp_cpu.c
+++ boinc-app-eah-brp/demod_binary_resamp_cpu.c
@@ -40,17 +40,12 @@
 float *del_t = NULL;
 
 
-int set_up_resampling(DIfloatPtr input_dip, DIfloatPtr *output_dip, const RESAMP_PARAMS *const params, float *sinLUTsamples, 
-float *cosLUTsamples)
+int set_up_resampling(DIfloatPtr const input_dip, DIfloatPtr * const output_dip, const RESAMP_PARAMS *const params, const float *const ignoreA, 
+const float *const ignoreB)
 {
-    float * input = input_dip.host_ptr;
+    //float * input = input_dip.host_ptr;
     float ** output = & (output_dip->host_ptr);
 
-    // unused
-    input = NULL;
-    sinLUTsamples = NULL;
-    cosLUTsamples = NULL;
-
     // allocate memory for time offsets in modulated time
 #ifndef BRP_FFT_INPLACE
     del_t = (float *) calloc(params->nsamples_unpadded, sizeof(float));
@@ -158,7 +153,7 @@ float *cosLUTsamples)
 //}
 
 
-int tear_down_resampling(DIfloatPtr output)
+int tear_down_resampling(DIfloatPtr const output)
 {
 #ifndef BRP_FFT_INPLACE
     free(del_t);
Index: boinc-app-eah-brp/demod_binary_resamp_cpu.h
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_resamp_cpu.h
+++ boinc-app-eah-brp/demod_binary_resamp_cpu.h
@@ -34,9 +34,9 @@
 extern "C" {
 #endif
 
-extern int set_up_resampling(DIfloatPtr input, DIfloatPtr *output, const RESAMP_PARAMS *const params, float *sinLUTsamples, float *cosLUTsamples);
-extern int run_resampling(DIfloatPtr input, DIfloatPtr output, const RESAMP_PARAMS *const params);
-extern int tear_down_resampling(DIfloatPtr output);
+extern int set_up_resampling(DIfloatPtr const input, DIfloatPtr* const output, const RESAMP_PARAMS* const params, const float* const, const float* const);
+extern int run_resampling(DIfloatPtr const input, DIfloatPtr output, const RESAMP_PARAMS *const params);
+extern int tear_down_resampling(DIfloatPtr const output);
 
 #ifdef __cplusplus
 }
Index: boinc-app-eah-brp/opencl/app/demod_binary_ocl.cpp
===================================================================
--- boinc-app-eah-brp.orig/opencl/app/demod_binary_ocl.cpp
+++ boinc-app-eah-brp/opencl/app/demod_binary_ocl.cpp
@@ -345,7 +345,7 @@ int initialize_ocl(int oclDeviceIdGiven,
 }
 
 
-int set_up_resampling(DIfloatPtr input_dip, DIfloatPtr *output_dip, const RESAMP_PARAMS *const params, float *sinLUTsamples, float *cosLUTsamples)
+int set_up_resampling(DIfloatPtr input_dip, DIfloatPtr *const output_dip, const RESAMP_PARAMS *const params, const float *const sinLUTsamples, const float* const cosLUTsamples)
 {
     cl_int oclResult;
     float * input = input_dip.host_ptr;
Index: boinc-app-eah-brp/opencl/app/demod_binary_ocl.h
===================================================================
--- boinc-app-eah-brp.orig/opencl/app/demod_binary_ocl.h
+++ boinc-app-eah-brp/opencl/app/demod_binary_ocl.h
@@ -40,7 +40,7 @@ extern "C" {
 
 extern int initialize_ocl(int oclDeviceIdGiven, int *oclDeviceId, cl_platform_id boincPlatformId, cl_device_id boincDeviceId);
 
-extern int set_up_resampling(DIfloatPtr input, DIfloatPtr *output, const RESAMP_PARAMS *const params, float *sinLUTsamples, float *cosLUTsamples);
+extern int set_up_resampling(DIfloatPtr input, DIfloatPtr* const output, const RESAMP_PARAMS* const params, const float* const sinLUTsamples, const float * const cosLUTsamples);
 extern int run_resampling(DIfloatPtr input, DIfloatPtr output, const RESAMP_PARAMS *const params);
 extern int tear_down_resampling(DIfloatPtr output);
 
Index: boinc-app-eah-brp/exchndl32.c
===================================================================
--- boinc-app-eah-brp.orig/exchndl32.c
+++ boinc-app-eah-brp/exchndl32.c
@@ -37,7 +37,7 @@
 static LPTOP_LEVEL_EXCEPTION_FILTER prevExceptionFilter = NULL;
 
 static
-int __cdecl rprintf(const TCHAR * format, ...)
+int __cdecl rprintf(const TCHAR * const format, ...)
 {
     TCHAR szBuff[4096];
     int retValue;
@@ -71,7 +71,7 @@ DWORD GetModuleBase(DWORD dwAddress)
 
 // Read in the symbol table.
 static bfd_boolean
-slurp_symtab (bfd *abfd, asymbol ***syms, long *symcount)
+slurp_symtab (bfd * const abfd, asymbol *** const syms, long * const symcount)
 {
     long storage;
 
@@ -104,9 +104,9 @@ struct find_handle
 };
 
 // Look for an address in a section.  This is called via  bfd_map_over_sections.
-static void find_address_in_section (bfd *abfd, asection *section, PTR data)
+static void find_address_in_section (bfd *const abfd, asection * const section, PTR const data)
 {
-    struct find_handle *info = (struct find_handle *) data;
+    struct find_handle * const info = (struct find_handle *) data;
     bfd_vma vma;
     bfd_size_type size;
 
@@ -129,7 +129,7 @@ static void find_address_in_section (bfd
 }
 
 static
-BOOL BfdDemangleSymName(LPCTSTR lpName, LPTSTR lpDemangledName, DWORD nSize)
+BOOL BfdDemangleSymName(const LPCTSTR const lpName, LPTSTR const lpDemangledName, const DWORD nSize)
 {
     char *res;
 
@@ -149,7 +149,7 @@ BOOL BfdDemangleSymName(LPCTSTR lpName,
 }
 
 static
-BOOL BfdGetSymFromAddr(bfd *abfd, asymbol **syms, long symcount, DWORD dwAddress, LPTSTR lpSymName, DWORD nSize)
+BOOL BfdGetSymFromAddr(bfd * const abfd, asymbol ** const syms, const long symcount, const DWORD dwAddress, LPTSTR const lpSymName, const DWORD nSize)
 {
     HMODULE hModule;
     struct find_handle info;
@@ -179,7 +179,7 @@ BOOL BfdGetSymFromAddr(bfd *abfd, asymbo
 }
 
 static
-BOOL BfdGetLineFromAddr(bfd *abfd, asymbol **syms, long symcount, DWORD dwAddress,  LPTSTR lpFileName, DWORD nSize, LPDWORD lpLineNumber)
+BOOL BfdGetLineFromAddr(bfd * const abfd, asymbol ** const syms, const long symcount, const DWORD dwAddress,  const LPTSTR const lpFileName, const DWORD nSize, LPDWORD const lpLineNumber)
 {
     HMODULE hModule;
     struct find_handle info;
Index: boinc-app-eah-brp/demod_binary_hs_cpu.c
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_hs_cpu.c
+++ boinc-app-eah-brp/demod_binary_hs_cpu.c
@@ -31,7 +31,8 @@
 #include "demod_binary.h"
 
 
-int set_up_harmonic_summing(float **sumspec,int32_t ** dirty,unsigned int * nr_pages_ptr,unsigned int fundamental_idx_hi, unsigned int harmonic_idx_hi)
+int set_up_harmonic_summing(float ** const sumspec,int32_t ** const dirty, unsigned int * const nr_pages_ptr,
+                            const unsigned int fundamental_idx_hi, const unsigned int harmonic_idx_hi)
 {
     int i;
     unsigned int nr_pages = (fundamental_idx_hi >> LOG_PS_PAGE_SIZE ) +1;
@@ -59,9 +60,9 @@ int set_up_harmonic_summing(float **sums
 }
 
 
-int run_harmonic_summing(float **sumspec, int32_t ** dirty_flags, unsigned int nr_pages,
-                         DIfloatPtr powerspectrum_dip, unsigned int window_2, unsigned int fundamental_idx_hi,
-                         unsigned int harmonic_idx_hi, float *thresholds)
+int run_harmonic_summing(float ** const sumspec, int32_t ** const dirty_flags, const unsigned int nr_pages,
+                         DIfloatPtr const powerspectrum_dip, const unsigned int window_2, const unsigned int fundamental_idx_hi,
+                         const unsigned int harmonic_idx_hi, const float * const thresholds)
 {
     int result,i;
     float * powerspectrum =  powerspectrum_dip.host_ptr; 
@@ -85,7 +86,7 @@ int run_harmonic_summing(float **sumspec
     return result;
 }
 
-int tear_down_harmonic_summing(float **sumspec, int32_t ** dirty)
+int tear_down_harmonic_summing(float ** const sumspec, int32_t ** const dirty)
 {
     int i;
 
Index: boinc-app-eah-brp/demod_binary_hs_cpu.h
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_hs_cpu.h
+++ boinc-app-eah-brp/demod_binary_hs_cpu.h
@@ -34,31 +34,31 @@
 extern "C" {
 #endif
 
-extern int set_up_harmonic_summing(float ** sumspec,
-                                   int32_t ** dirty,
-                                   unsigned int * nr_pages_ptr, 
-                                   unsigned int fundamental_idx_hi,
-                                   unsigned int harmonic_idx_hi);
-
-extern int harmonic_summing(float ** sumspec,
-                     int32_t ** dirtyFlags,
-                     const float * powerspectrum,
+extern int set_up_harmonic_summing(float ** const sumspec,
+                                   int32_t ** const dirty,
+                                   unsigned int * const nr_pages_ptr,
+                                   const unsigned int fundamental_idx_hi,
+                                   const unsigned int harmonic_idx_hi);
+
+extern int harmonic_summing(float ** const sumspec,
+                     int32_t ** const dirtyFlags,
+                     const float * const powerspectrum,
                      unsigned int window_2,
                      unsigned int fundamental_idx_hi,
                      unsigned int harmonic_idx_hi,
-                     float * thr);
+                     const float * const thr);
 
 extern int run_harmonic_summing(float **sumspec, 
                                 int32_t ** dirty_flags, 
-                                unsigned int nr_pages,
+                                const unsigned int nr_pages,
                                 DIfloatPtr powerspectrum, 
                                 unsigned int window_2, 
-                                unsigned int fundamental_idx_hi,
-                                unsigned int harmonic_idx_hi, 
-                                float *thresholds);
+                                const unsigned int fundamental_idx_hi,
+                                const unsigned int harmonic_idx_hi,
+                                const float * const thresholds);
 
-extern int tear_down_harmonic_summing(float ** sumspec, 
-                                      int32_t ** dirty);
+extern int tear_down_harmonic_summing(float ** const sumspec,
+                                      int32_t ** const dirty);
 
 
 #ifdef __cplusplus
Index: boinc-app-eah-brp/rngmed.c
===================================================================
--- boinc-app-eah-brp.orig/rngmed.c
+++ boinc-app-eah-brp/rngmed.c
@@ -23,7 +23,7 @@
 
 
 /*Used in running qsort*/
-static int rngmed_qsortindex(const void *elem1, const void *elem2)
+static int rngmed_qsortindex(const void *const elem1, const void *const elem2)
 {
   struct qsnode
   {
@@ -45,7 +45,7 @@ static int rngmed_qsortindex(const void
 }
 
 
-void rngmed(const float *input, const unsigned int length, const unsigned int bsize, float *medians)
+void rngmed(const float *const input, const unsigned int length, const unsigned int bsize, float *const medians)
 {
   /* a single "node"
      lesser  points to the next node with less or equal value
Index: boinc-app-eah-brp/hs_common.h
===================================================================
--- boinc-app-eah-brp.orig/hs_common.h
+++ boinc-app-eah-brp/hs_common.h
@@ -41,13 +41,13 @@ extern "C" {
 static const int h_lut[16] = {4,3,2,2,2,  1, 1, 1, 1 , 1, 1, 1     ,-1,   3,2,1};
 static const int k_lut[16] = {0,4,2,6,10, 1, 3, 5, 7 , 9,11,13     ,-1,   0,2,3};
 
-int harmonic_summing(float ** sumspec,
-                     int32_t ** dirtyFlags,
-                     const float * powerspectrum,
-                     unsigned int window_2,
-                     unsigned int fundamental_idx_hi,
-                     unsigned int harmonic_idx_hi,
-                     float * thr);
+int harmonic_summing(float ** const sumspec,
+                     int32_t ** const dirtyFlags,
+                     const float * const powerspectrum,
+                     const unsigned int window_2,
+                     const unsigned int fundamental_idx_hi,
+                     const unsigned int harmonic_idx_hi,
+                     const float * const thr);
 
 
 }
Index: boinc-app-eah-brp/demod_binary_fft_fftw.c
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_fft_fftw.c
+++ boinc-app-eah-brp/demod_binary_fft_fftw.c
@@ -45,7 +45,7 @@ fftwf_plan fft_plan;
 extern const char fftw_version[];
 
 
-int set_up_fft(DIfloatPtr input, DIfloatPtr *output, uint32_t nsamples, unsigned int fft_size)
+int set_up_fft(DIfloatPtr const input, DIfloatPtr * const output, uint32_t const nsamples, const unsigned int fft_size)
 {
     // allocate memory for FFT (use of fftwf_malloc recommended by FFTW, see manual: section 2.1, page 3)
 
@@ -155,11 +155,13 @@ int set_up_fft(DIfloatPtr input, DIfloat
 }
 
 
-int run_fft(DIfloatPtr input, DIfloatPtr output, uint32_t nsamples, unsigned int fft_size, float norm_factor)
+int run_fft(DIfloatPtr const input, DIfloatPtr const output, const uint32_t nsamples, const unsigned int fft_size, const float norm_factor)
 {
+/*
     // unused, as the pointers for input & output of FFT are already encapsulated in the plan
     input.host_ptr = NULL;
     nsamples = 0;
+*/
 
     // execute FFT
     fftwf_execute(fft_plan);
Index: boinc-app-eah-brp/demod_binary_fft_fftw.h
===================================================================
--- boinc-app-eah-brp.orig/demod_binary_fft_fftw.h
+++ boinc-app-eah-brp/demod_binary_fft_fftw.h
@@ -35,8 +35,8 @@
 extern "C" {
 #endif
 
-extern int set_up_fft(DIfloatPtr input, DIfloatPtr * output, uint32_t nsamples, unsigned int fft_size);
-extern int run_fft(DIfloatPtr input, DIfloatPtr output, uint32_t nsamples, unsigned int fft_size, float norm_factor);
+extern int set_up_fft(DIfloatPtr const input, DIfloatPtr * const output, const uint32_t nsamples, const unsigned int fft_size);
+extern int run_fft(DIfloatPtr const input, DIfloatPtr output, const uint32_t nsamples, const unsigned int fft_size, const float norm_factor);
 extern int tear_down_fft(DIfloatPtr output);
 
 #ifdef __cplusplus
Index: boinc-app-eah-brp/erp_execinfo_plus.c
===================================================================
--- boinc-app-eah-brp.orig/erp_execinfo_plus.c
+++ boinc-app-eah-brp/erp_execinfo_plus.c
@@ -56,12 +56,12 @@ void report(const char *, va_list) ATTRI
 void fatal(const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;
 void non_fatal(const char *, ...) ATTRIBUTE_PRINTF_1;
 int set_default_bfd_target(void);
-void list_matching_formats(char **);
+void list_matching_formats(const char * const *);
 off_t get_file_size(const char *);
 
 /* Read in the symbol table.  */
 
-static int slurp_symtab(bfd *abfd)
+static int slurp_symtab(bfd *const abfd)
 {
     long symcount;
     unsigned int size;
@@ -92,7 +92,7 @@ static bfd_boolean found;
 /* Look for an address in a section.  This is called via
  bfd_map_over_sections.  */
 
-static void find_address_in_section(bfd *abfd, asection *section, void *data ATTRIBUTE_UNUSED)
+static void find_address_in_section(bfd *const abfd, asection *const section, void *const data ATTRIBUTE_UNUSED)
 {
     bfd_vma vma;
     bfd_size_type size;
@@ -118,7 +118,7 @@ static void find_address_in_section(bfd
 /* Translate hexadecimal address into
  file_name:line_number and optionally function name.  */
 
-static void translate_address(bfd *abfd, const char *address)
+static void translate_address(bfd *const abfd, const char *const address)
 {
     pc = bfd_scan_vma(address, NULL, 16);
 
@@ -170,7 +170,7 @@ static void translate_address(bfd *abfd,
 
 /* Process a file */
 
-static int process_file(const char *file_name, const char *address)
+static int process_file(const char *const file_name, const char *const address)
 {
     bfd *abfd;
     char **matching;
@@ -214,7 +214,7 @@ static int process_file(const char *file
     return 0;
 }
 
-int backtrace_symbols_fd_plus(const char *const *symbols, int size, int fd)
+int backtrace_symbols_fd_plus(const char *const *symbols, const int size, int fd)
 {
     /* sanity check */
     if (fd <= 0) {
@@ -320,7 +320,7 @@ int backtrace_symbols_fd_plus(const char
     return retval;
 }
 
-void bfd_nonfatal(const char *string)
+void bfd_nonfatal(const char *const string)
 {
     const char *errmsg = bfd_errmsg(bfd_get_error());
 
@@ -330,18 +330,18 @@ void bfd_nonfatal(const char *string)
         fprintf(ostream, "%s\n", errmsg);
 }
 
-void bfd_fatal(const char *string)
+void bfd_fatal(const char *const string)
 {
     bfd_nonfatal(string);
 }
 
-void report(const char * format, va_list args)
+void report(const char * const format, va_list args)
 {
     vfprintf(ostream, format, args);
     putc ('\n', ostream);
 }
 
-void fatal VPARAMS ((const char *format, ...))
+void fatal VPARAMS ((const char *const format, ...))
 {
     VA_OPEN (args, format);
     VA_FIXEDARG (args, const char *, format);
@@ -350,7 +350,7 @@ void fatal VPARAMS ((const char *format,
     VA_CLOSE (args);
 }
 
-void non_fatal VPARAMS ((const char *format, ...))
+void non_fatal VPARAMS ((const char *const format, ...))
 {
     VA_OPEN (args, format);
     VA_FIXEDARG (args, const char *, format);
@@ -363,7 +363,7 @@ void non_fatal VPARAMS ((const char *for
  exist, or if it is not a real file, then a suitable non-fatal
  error message is printed and zero is returned.  */
 
-off_t get_file_size(const char * file_name)
+off_t get_file_size(const char *const file_name)
 {
     struct stat statbuf;
 
@@ -385,7 +385,7 @@ off_t get_file_size(const char * file_na
  bfd_get_error () == bfd_error_file_ambiguously_recognized, print
  the possible matching targets.  */
 
-void list_matching_formats(char **p)
+void list_matching_formats(char const * const *p)
 {
     fprintf(ostream, _("Matching formats:"));
     while (*p)
@@ -401,7 +401,7 @@ void list_matching_formats(char **p)
 int set_default_bfd_target(void)
 {
     /* The macro TARGET is defined by Makefile.  */
-    const char *target = TARGET;
+    const char *const target = TARGET;
 
     if (!bfd_set_default_target(target)) {
         fatal(_("can't set BFD default target to `%s': %s"), target,
Index: boinc-app-eah-brp/erp_execinfo_plus.h
===================================================================
--- boinc-app-eah-brp.orig/erp_execinfo_plus.h
+++ boinc-app-eah-brp/erp_execinfo_plus.h
@@ -32,7 +32,7 @@ extern "C" {
      *
      * @return: 0 if success, <0 if error, >0 if warning
      */
-    int backtrace_symbols_fd_plus(const char *const *symbols, int size, int fd);
+    int backtrace_symbols_fd_plus(const char *const *symbols, const int size, int fd);
 
 #ifdef __cplusplus
 }
Index: boinc-app-eah-brp/hs_common.c
===================================================================
--- boinc-app-eah-brp.orig/hs_common.c
+++ boinc-app-eah-brp/hs_common.c
@@ -33,9 +33,9 @@ extern "C" {
 int harmonic_summing(float ** const sumspec,
                      int32_t ** const dirty,
                      const float * const powerspectrum,
-                     unsigned int window_2,
-                     unsigned int fundamental_idx_hi,
-                     unsigned int harmonic_idx_hi,
+                     const unsigned int window_2,
+                     const unsigned int fundamental_idx_hi,
+                     const unsigned int harmonic_idx_hi,
                      const float * const thr) {	
 
       // loop over frequency bins and maximize the summed power at each bin for each number of summed harmonics
Index: boinc-app-eah-brp/erp_boinc_wrapper.cpp
===================================================================
--- boinc-app-eah-brp.orig/erp_boinc_wrapper.cpp
+++ boinc-app-eah-brp/erp_boinc_wrapper.cpp
@@ -193,7 +193,7 @@ static void sighandler(int sig)
     return;
 }
 
-gzFile boinc_gzopen(const char* path, const char* mode) {
+gzFile boinc_gzopen(const char* const path, const char* const mode) {
   FILE* fp = boinc_fopen(path, mode);
   if(!fp) return NULL;
   return gzdopen(fileno(fp), mode);
@@ -203,7 +203,7 @@ void erp_fraction_done(const double frac
   boinc_fraction_done((frac+pass)/passes);
 }
 
-static void handle_option(vector<char*>& options, int& option_index, const char* option)
+static void handle_option(vector<char*>& options, int& option_index, const char* const option)
 {
     /* add option to forwarded option list */
     options.push_back((char*) calloc(strlen(option) + 1, sizeof(char)));
@@ -215,7 +215,7 @@ static void handle_option(vector<char*>&
     option_index++;
 }
 
-static void handle_option_value(vector<char*>& options, int& option_index, const char* value)
+static void handle_option_value(vector<char*>& options, int& option_index, const char* const value)
 {
     /* add value to forwarded option list */
     options.push_back((char*) calloc(strlen(value) + 1, sizeof(char)));
@@ -227,7 +227,7 @@ static void handle_option_value(vector<c
     option_index++;
 }
 
-static void handle_option_file_value(vector<char*>& options, int& option_index, const char* value)
+static void handle_option_file_value(vector<char*>& options, int& option_index, const char* const value)
 {
     /* add filename to forwarded option list */
     options.push_back((char*) calloc(MAX_PATH_LENGTH, sizeof(char)));
Index: boinc-app-eah-brp/erp_boinc_wrapper.h
===================================================================
--- boinc-app-eah-brp.orig/erp_boinc_wrapper.h
+++ boinc-app-eah-brp/erp_boinc_wrapper.h
@@ -39,7 +39,7 @@ extern "C" {
 #endif
 
     extern int MAIN(unsigned int,char**);
-    extern gzFile boinc_gzopen(const char* path, const char* mode);
+    extern gzFile boinc_gzopen(const char* const path, const char* const mode);
 
 #ifdef  __cplusplus
 }
Index: boinc-app-eah-brp/run_resampling_AVX.c
===================================================================
--- boinc-app-eah-brp.orig/run_resampling_AVX.c
+++ boinc-app-eah-brp/run_resampling_AVX.c
@@ -7,8 +7,8 @@
 
 #include <immintrin.h>
 
-int run_resampling(DIfloatPtr input_dip, DIfloatPtr output_dip, const RESAMP_PARAMS * const params) {
-    float * input = input_dip.host_ptr;
+int run_resampling(DIfloatPtr const input_dip, DIfloatPtr const output_dip, const RESAMP_PARAMS * const params) {
+    const float * input = input_dip.host_ptr;
     float * output = output_dip.host_ptr;
 
     unsigned int n_steps; // number of timesteps to take when resampling
Index: boinc-app-eah-brp/run_resampling_NEON.c
===================================================================
--- boinc-app-eah-brp.orig/run_resampling_NEON.c
+++ boinc-app-eah-brp/run_resampling_NEON.c
@@ -10,8 +10,8 @@
 
 #include <arm_neon.h>
 
-int run_resampling(DIfloatPtr input_dip, DIfloatPtr output_dip, const RESAMP_PARAMS * const params) {
-    float * input = input_dip.host_ptr;
+int run_resampling(DIfloatPtr const input_dip, DIfloatPtr const output_dip, const RESAMP_PARAMS * const params) {
+    const float * input = input_dip.host_ptr;
     float * output = output_dip.host_ptr;
 
     unsigned int n_steps; // number of timesteps to take when resampling
Index: boinc-app-eah-brp/run_resampling_SCALAR.c
===================================================================
--- boinc-app-eah-brp.orig/run_resampling_SCALAR.c
+++ boinc-app-eah-brp/run_resampling_SCALAR.c
@@ -6,8 +6,8 @@
  * of SIMD.
  *****/
 
-int run_resampling(DIfloatPtr input_dip, DIfloatPtr output_dip, const RESAMP_PARAMS * const params) {
-   float * input  = input_dip.host_ptr;
+int run_resampling(DIfloatPtr const input_dip, DIfloatPtr const output_dip, const RESAMP_PARAMS * const params) {
+   const float * input  = input_dip.host_ptr;
    float * output = output_dip.host_ptr;
 
    unsigned int n_steps;           // number of timesteps to take when resampling
